// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(uuid())
  username  String         @unique
  email     String         @unique
  password  String
  quizzes   Quizz[]
  responses UserResponse[]
}

model Quizz {
  id String @id @default(uuid())

  title        String
  category     String
  description  String?
  image        String?
  countOfPlays Int     @default(0)

  questions Question[]
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
}

model Question {
  id String @id @default(uuid())

  text String
  type QuestionType
  time Int // in seconds

  responses UserResponse[]
  options   Option[]
  quizz     Quizz          @relation(fields: [quizzId], references: [id], onDelete: Cascade)
  quizzId   String
}

model Option {
  id String @id @default(uuid())

  text      String
  isCorrect Boolean

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  responses UserResponse[]
}

model UserResponse {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String

  option   Option @relation(fields: [optionId], references: [id])
  optionId String
}

enum QuestionType {
  TRUE_FALSE
  QUIZ
}
